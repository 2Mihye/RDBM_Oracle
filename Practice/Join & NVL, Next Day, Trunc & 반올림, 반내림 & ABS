
-- JOIN (= INNER JOIN) : 일치하는 행만 반환
-- 부서와 직원 테이블을 JOIN 하여 각 직원의 부서 정보를 가져온다.
SELECT e.ENO, e.ENAME, d.DNAME FROM EMPLOYEE e JOIN DEPARTMENT d ON e.DNO = d.DNO;
-- LEFT JOIN : 왼쪽 테이블의 모든 행을 반환
-- 모든 부서와 부서에 속한 직원 가져오기 만약 부서에 속한 직원이 없는 경우에는 부서 정보 포함하기
SELECT d.DNO, d.DNAME, e.ENO, e.ENAME FROM DEPARTMENT d LEFT JOIN EMPLOYEE e ON d.DNO = e.ENO;
-- RIGHT JOIN : 오른쪽 테이블의 모든 행을 반환
--모든 직원과 직원이 속한 부서 정보 가져오기 부서에 속하지 않은 경우도 직원 정보 포함
SELECT e.ENO, e.ENAME, d.DNO, d.DNAME FROM EMPLOYEE e RIGHT JOIN DEPARTMENT d ON e.DNO = d.DNO;
-- FULL JOIN : 양쪽 테이블의 모든 행을 반환
SELECT d.DNO, d.DNAME, e.ENO, e.ENAME FROM DEPARTMENT d FULL JOIN EMPLOYEE e ON d.DNO = e.DNO;
-- 가장 많이 쓰는 명령어 ORDER, GROUP BY, WHERE, JOIN

--NULL 값을 다른 값으로 대체해야 할 경우 쓰는 것 -> NVL
-- NVL (Null Value L~) : Null 값을 다른 값으로 대체
SELECT ENAME, NVL(COMMISSION, 0) AS COMMISSION FROM EMPLOYEE;

-- NEXT DAY 다음 주어진 요일 날짜 찾기
SELECT ENAME, NEXT_DAY(SYSDATE, 'FRIDAY') AS NEXTDAY FROM DAUL;

-- TRUNC :  날짜 또는 숫자의 소수부 제거
SELECT ENAME, TRUNC(SALARY) AS TRUNC_SALARY FROM EMPLOYEE;

-- FLOOR, CEIL, ROUND : 숫자 반올림 및 내림
SELECT ENAME, FLOOR(SALARY) AS FLOOR_SALARY FROM EMPLOYEE;
SELECT ENAME, CEIL(SALARY) AS CEIL_SALARY FROM EMPLOYEE;
SELECT ENAME, ROUND(SALARY, 2) AS ROUND_SALARY FROM EMPLOYEE;

-- ABS(ABSOLUTE) :  절대값 계산 (-를 없앰)
SELECT ENAME, ABS(COMMISSION) AS ABS_COMMISSION FROM EMPLOYEE;

-- 시퀀스 : 자동으로 증가하는 숫자값을 생성하기 위한 객체
-- 트리거 : 특정 이벤트가 발생할 때 자동으로 실행되는 저장 코드

CREATE TABLE SALARY_INFO(EID NUMBER PRIMARY KEY, ENAME VARCHAR2(50), SALARY NUMBER(10, 2)); --테이블 생성

INSERT INTO SALARY_INFO(EID, ENAME, SALARY)
VALUES (1, '맴머드', 50000.50); --첫 번째 직원 데이터

INSERT INTO SALARY_INFO(EID, ENAME, SALARY)
VALUES (2, '바나스', 60000.75); --두 번째 직원 데이터

INSERT INTO SALARY_INFO(EID, ENAME, SALARY)
VALUES (3, '박다밤', 80000.88); --세 번째 직원 데이터

INSERT INTO SALARY_INFO(EID, ENAME, SALARY)
VALUES (4, '맥가컾', 70000.92); --네 번째 직원 데이터

INSERT INTO SALARY_INFO(EID, ENAME, SALARY)
VALUES (5, '커피', 90000.92); --다섯 번째 직원 데이터

-- ID가 1인 직원의 급여를 FLOOR 함수를 사용하여 내림
SELECT EID, ENAME, FLOOR(SALARY) AS F_SALARY FROM SALARY_INFO WHERE EID = 1;

-- ID가 2인 직원의 급여 CEIL 함수를 사용해서 올림
SELECT EID, ENAME, CEIL(SALARY) AS C_SALARY FROM SALARY_INFO WHERE EID = 2;

-- ID가 3인 직원의 급여를 ROUND 함수를 사용해서 반올림\
SELECT EID, ENAME, ROUND(SALARY, 2) AS R_SALARY FROM SALARY_INFO WHERE EID = 3;

-- ID가 4인 직원의 급여를 FLOOR 함수를 사용해서 내림
SELECT EID, ENAME, FLOOR(SALARY) AS F_SALARY FROM SALARY_INFO WHERE EID = 4;
