
SELECT DNO, AVG(SALARY) AS avg_sal FROM employee GROUP BY DNO HAVING AVG (salary) >= 4000;

--GROUP BY HAVING 사용하여 직원 수가 3명 이상인 부서의 부서 번호와 직원수 찾기 COUNT
SELECT DNO, COUNT(*) AS employee_no FROM EMPLOYEE GROUP BY DNO HAVING count (*) >= 3;

-- 각 부서에서 가장 높은 급여를 받는 직원 찾기
-- HAVING MAX(SALARY) = ( SELECT MAX (SALARY FROM EMPLOYEE)
SELECT ENAME, AVG(SALARY) AS max_salary FROM EMPLOYEE GROUP BY salary HAVING MAX(SALARY) = (SELECT MAX (SALARY FROM EMPLOYEE));

-- 급여 중간값이 3500 이상인 부서 찾기 HAVING MEDIAN(SALARY)>= 3500;
SELECT DNO, AVG(SALARY) AS AVG_SAL FROM EMPLOYEE GROUP BY DNO HAVING MEDIAN(SALARY) >= 3500;

-- 부서와 직책별로 직원 수가 2명 이상인 경우 찾기 COUNT, GROUP BY 2개 나올 수 있음
SELECT DNO, COUNT(*) AS employee_no FROM EMPLOYEE GROUP BY DNO HAVING COUNT(*) >= 2;
SELECT JOB, COUNT(*) AS employee_no FROM EMPLOYEE GROUP BY JOB HAVING COUNT(*) >= 2;

--모든 부서의 평균 급여를 구하기
SELECT DNO, AVG(SALARY) AS AVG_SAL FROM EMPLOYEE GROUP BY DNO;

--급여가 4000 이상인 직원 수를 찾기
SELECT COUNT(*) AS employee_no FROM EMPLOYEE WHERE SALARY >= 4000;

--부서별로 가장 높은 급여 찾기
SELECT DNO, MAX(SALARY) AS MAX_SAL FROM EMPLOYEE GROUP BY DNO;

--부서별로 직원 수가 3명 이상인 부서 찾기
SELECT DNO, COUNT(*) FROM EMPLOYEE GROUP BY DNO HAVING COUNT(*) >= 3;

--부서별로 직원 수가 0인 부서 찾기
SELECT DNO, COUNT(*) FROM EMPLOYEE GROUP BY DNO HAVING COUNT(*) = 0;

--부서별로 급여 합계를 구하고, 합계가 20000 이상인 부서 찾기
SELECT DNO, SUM(SALARY) AS sum_salary FROM EMPLOYEE GROUP BY DNO HAVING SUM(SALARY) >= 20000;

--각 부서에서 가장 오래된 직원 찾기
SELECT DNO, ENAME, MIN(HIREDATE) AS min_hiredate FROM EMPLOYEE GROUP BY DNO,ENAME;

--부서별로 직원의 직무 수 찾기
SELECT DNO, JOB, COUNT(*) AS JOB_COUNT FROM EMPLOYEE GROUP BY DNO, JOB;

--급여가 평균 급여보다 높은 직원 찾기
SELECT ENAME, AVG(SALARY) AS AVG_SAL FROM EMPLOYEE GROUP BY ENAME HAVING SALARY > AVG(SALARY);

--부서별로 최소 급여가 3000 이상인 직원 찾기
SELECT DNO, ENAME, MIN(SALARY) AS MIN_SAL FROM EMPLOYEE GROUP BY DNO, ENAME HAVING MIN(SALARY) >= 3000;

--부서별로 급여 합계가 10000 이상이고 직원 수가 2명 이상인 부서 찾기
SELECT DNO, SUM(SALARY) AS SUM_SAL FROM EMPLOYEE GROUP BY DNO HAVING SUM(SALARY) >= 10000 AND COUNT(*) >= 2;
-- 선생님 풀이 : SELECT DNO, SUM(SALARY), COUNT(*) FROM EMPLOYEE GROUP BY DNO HAVING SUM(SALARY) >= 10000 AND COUNT(*) >=2;
-- HAVING SUM(SALARY) >= 1000 AND COUNT(*) >= 2;

--부서별로 직원의 입사일자가 2023-01-01 이후인 직원 수 찾기
-- SELECT DNO, COUNT(*) AS EMPLOYEE_NO FROM EMPLOYEE GROUP BY DNO HAVING hiredate > '2023-01-01';
-- 풀이 : SELECT DNO, COUNT(*) FROM EMPLOYEE WHERE HIREDATE >= TO_DATE('2023-01-01','YYYY-MM-DD') GROUP BY DNO;
SELECT DNO, COUNT(*) AS E_NO FROM EMPLOYEE WHERE HIREDATE >= TO_DATE('2023-01-01','YYYY-MM-DD') GROUP BY DNO;

--급여가 가장 높은 직원 찾기
SELECT ENAME, SALARY FROM EMPLOYEE WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE);

--급여가 두 번째로 높은 직원 찾기
SELECT ENAME, SALARY FROM EMPLOYEE WHERE SALARY = (SELECT DISTINCT SALARY FROM EMPLOYEE WHERE ROWNUM = 2);
-- SELECT ENAME, SALARY FROM EMPLOYEE WHERE SALARY = (SELECT DISTINCT SALARY FROM (SELECT DINSTINCT

-- 급여 범위별로 직원 수 세기
SELECT CASE
    WHEN SALARY < 3000 THEN 'LOW'
    WHEN SALARY >= 3000 AND SALARY < 5000 THEN 'MEDIUM'
    ELSE 'HIHG'
    END, COUNT(*)
FROM EMPLOYEE GROUP BY CASE
    WHEN SALARY < 3000 THEN 'LOW'
    WHEN SALARY >= 3000 AND SALARY < 5000 THEN 'MEDIUM'
    ELSE 'HIGH'
    END;
    
--급여가 5000 이상이고 커미션을 받지 않는 직원 찾기
-- SELECT DNO, ENAME, SALARY FROM EMPLOYEE WHERE SALARY >= 5000 AND COMMISSION IS NULL;
SELECT DNO, ENAME, SALSARY FROM EMPLOYEE WHERE SALARY >= 5000 AND COMMISSION IS NULL;

--직원 수가 가장 많은 부서 찾기
SELECT DNO, COUNT(*) FROM EMPLOYEE GROUP BY DNO GROUP BY COUNT(*) FETCH FIRST 1 ROW ONLY;

--급여가 평균 급여보다 높은 부서의 직원 수 찾기
SELECT DNO, COUNT(*) FROM EMPLOYEE WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE) --서브쿼리
GROUP BY DNO;

--급여가 가장 높은 직무 찾기
SELECT JOB, SALARY FROM EMPLOYEE WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE);
